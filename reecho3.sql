create table CATEGORIAS(
    codigo number(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descripcion varchar2(60),
    salario_min number(6),
    salario_max number(6)
)

create table DEPARTAMENTO (
    depto_id number(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre varchar2(30)
)

create table PROYECTO (
    id number(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre varchar2(40),
    fecha_inicio date,
    fecha_fin date,
    duracion number(4)
)


create table EMPLEADO (
    id number(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre varchar2(25),
    apellido varchar2(25),
    email varchar2(40),
    telefono varchar2(12),
    fecha_alta date,
    cuil number(11),
    categoria_codigo number(4),
    departamento_id number(4),
    FOREIGN KEY (departamento_id) references DEPARTAMENTO(depto_id),
    FOREIGN KEY (categoria_codigo) references CATEGORIA(codigo)
)


create table PROY_EMPLE (
    empleado_id number(4),
    proyecto_id number(4),
    horas_dedicacion number(2),
    FOREIGN KEY (empleado_id) references EMPLEADO(id),
    FOREIGN KEY (proyecto_id) references PROYECTO(id)
)
--Listar el promedio de salario de cada una de las categor?as de empleado.--
select (salario_min + salario_max) / 2 from categorias;

-- Eliminar los registros de aquellos proyectos que a?n no tienen asignado ning?n empleado y que no han finalizado. --


-- Realizar un listado de los gerentes de cada uno de los departamentos indicando su nombre y apellido, el nombre del departamento
--y la descripci?n de su categor?a. --

select empleado.nombre, apellido, departamento.nombre, categorias.descripcion from empleado 
inner join departamento on departamento.depto_id = empleado.departamento_id
inner join categorias on categorias.codigo = empleado.categoria_codigo
where categorias.descripcion = 'gerente'
;

-- Actualizar los registros de todos los empleados haciendo que la columna de mail est? formada por la primera letra del 
--nombre Concatenada con su apellido los 3 ?ltimos d?gitos de identificaci?n (id) agreg?ndole ?@abcsistemas.com?. Tener en cuenta 
--que todos los caracteres deben estar en min?scula.

update empleado set email = lower(substr(nombre,1) || apellido || substr(id, -3, 3) || '@abcsistemas.com');


-- Obtener un listado de los empleados con su Cuil de los que se dedican a m?s de un proyecto y cuya dedicaci?n semanal sea de 50 horas.
select e.nombre, e.apellido, e.cuil from proy_emple pe
inner join proyecto p on p.id = pe.proyecto_id
inner join empleado e on e.id = pe.empleado_id
where pe.horas_dedicacion = 50
group by e.nombre, e.apellido, e.cuil
having count(empleado_id) > 1
;

-- Realizar un listado con los nombres y los c?digos de cada uno de los departamentos indicando cu?ntos empleados trabajan en ellos 
--sin contar los gerentes ni los jefes de departamentos.
select count(departamento_id), d.nombre, d.depto_id from empleado e
inner join departamento d on d.depto_id = e.departamento_id
inner join categorias c on c.codigo = e.categoria_codigo
where c.descripcion not in ('gerente')
group by d.nombre,d.depto_id;

-- Realizar un listado de empleados en los que se mostrar? su Apellido y Nombre separados por coma en una ?nica columna,
--la antig?edad en la empresa (a?os desde su alta) y un Bono en funci?n de su antig?edad. Si la antig?edad es superior a 30 a?os 
--le corresponde $ 150.000. Si la antig?edad est? entre 20 y 30 a?os le corresponde $80.000. Si su antig?edad es menor que 20 mostrar 
--le corresponde un bono de $ 45.000.
select apellido || ','|| nombre as empleado, fecha_alta, sysdate as fecha_de_hoy, trunc(months_between(sysdate, fecha_alta)/12) as antiguedad,
case 
when trunc(months_between(sysdate, fecha_alta)/12) > 30 then 150000
when trunc(months_between(sysdate, fecha_alta)/12) < 20 then 450000
else 80000
end
as bono
from empleado;


--confeccionar un informe que indique cuales son los empleados cuyos proyectos comenzaron la semana pasada
SELECT DISTINCT  *
FROM proy_emple
inner join empleado on empleado.id = proy_emple.empleado_id
inner join proyecto on proyecto.id = proy_emple.proyecto_id
WHERE proyecto.fecha_inicio >= TRUNC(SYSDATE, 'IW') - 7
  AND proyecto.fecha_inicio < TRUNC(SYSDATE, 'IW');
  
update proyecto set fecha_inicio = to_date('2023-06-30', 'yyyy/mm/dd') where proyecto.id = 4006;
update proyecto set fecha_inicio = to_date('2023-06-29', 'yyyy/mm/dd') where proyecto.id = 4007;
  
SELECT *
FROM proy_emple
inner join empleado on empleado.id = proy_emple.empleado_id
inner join proyecto on proyecto.id = proy_emple.proyecto_id
WHERE proyecto.fecha_inicio = TRUNC(SYSDATE)- INTERVAL '7' DAY;



